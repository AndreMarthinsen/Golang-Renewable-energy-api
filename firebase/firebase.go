// package firebase provides generic Firebase functionality.

package firebase

import (
	"cloud.google.com/go/firestore"
	"context"
	fb "firebase.google.com/go"
	"google.golang.org/api/option"
	"log"
)

// client and context for firestore
// TODO wrap in a struct?
var client *firestore.Client
var ctx context.Context

// InitializeFirestore lets app communicate with a cloud Firestore database.
// configFilePath refers to account credentials config file created
// when setting up Firestore in browser.
func InitializeFirestore(configFilePath string) {
	ctx = context.Background()

	// Service account credentials:
	sa := option.WithCredentialsFile(configFilePath)
	app, err := fb.NewApp(ctx, nil, sa)
	if err != nil {
		log.Fatalln(err) // TODO handle another way?
	}

	// Instantiate firebase client:
	client, err = app.Firestore(ctx)
	if err != nil {
		log.Fatalln(err)
	}

	// Close down client:
	defer func() {
		err2 := client.Close()
		if err2 != nil {
			log.Fatal("Could not close Firebase client. Error:", err2)
		}
	}()

}

// AddDocument stores a new document in a Firestore collection (by name).
// Returns autogenerated document ID.
func AddDocument(collection string, document map[string]interface{}) (string, error) {
	id, _, err := client.Collection(collection).Add(ctx, document)
	if err != nil {
		log.Println("Duplicate document id generated")
		return "", err
	}
	return id.ID, nil
}

// DeleteData deletes data with a specific id from a collection.
func DeleteData(collection, id string) error {
	_, err := client.Collection(collection).Doc(id).Delete(ctx)
	if err != nil {
		log.Println("Error while deleting")
	}
	return nil
}

// ReadDocument reads a specific document by id.
func ReadDocument(collection, id string) (map[string]interface{}, error) {
	documentSnap, err := client.Collection(collection).Doc(id).Get(ctx)
	if err != nil {
		return nil, err
	}
	document := documentSnap.Data()

	return document, nil
}
