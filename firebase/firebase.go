// package firebase provides generic Firebase functionality.

package firebase

import (
	"cloud.google.com/go/firestore"
	"context"
	// TODO rename package to avoid name collisions
	fb "firebase.google.com/go"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"log"
)

func NewFirestoreContext(config *Config, configFilePath string) error {

	config.FirestoreClient = new(firestore.Client)
	config.Ctx = new(context.Context)

	*config.Ctx = context.Background()

	// Load service account credentials:
	serviceAccount := option.WithCredentialsFile(configFilePath)
	app, err := fb.NewApp(*config.Ctx, nil, serviceAccount)
	if err != nil {
		log.Println("unable to create new firebase app")
		return err
	}
	// Instantiate firebase client
	config.FirestoreClient, err = app.Firestore(*config.Ctx)
	if err != nil {
		log.Println("unable to instantiate firestore client")
		return err
	}
	return nil
}

// Close closes the client
func Close(config *Config) error {
	err := config.FirestoreClient.Close()
	if err != nil {
		log.Println("could not close Firebase client")
		return err
	}
	return nil
}

// AddDocument stores a new document in a Firestore collection (by name).
// Returns autogenerated document ID.
func AddDocument(config *Config, collection string, document interface{}) (string, error) {
	id, _, err := config.FirestoreClient.Collection(collection).Add(*config.Ctx, document)
	if err != nil {
		log.Println("Duplicate document id generated")
		return "", err
	}
	return id.ID, nil
}

// AddDocumentById stores a new document with specified id in a
// Firestore collection.
func AddDocumentById(config *Config, collection string, id string, document interface{}) error {
	_, err := config.FirestoreClient.Collection(collection).Doc(id).Set(*config.Ctx, document)
	if err != nil {
		log.Println("Could not create document with id: ", id)
		return err
	}
	return nil
}

// DeleteDocument deletes data with a specific id from a collection.
func DeleteDocument(config *Config, collection, id string) error {
	_, err := config.FirestoreClient.Collection(collection).Doc(id).Delete(*config.Ctx)
	if err != nil {
		log.Println("Error while deleting document")
		return err
	}
	return nil
}

// ReadDocument reads a specific document by id.
func ReadDocument(config *Config, collection, id string) (map[string]interface{}, error) {
	documentSnap, err := config.FirestoreClient.Collection(collection).Doc(id).Get(*config.Ctx)
	if err != nil {
		return nil, err
	}
	document := documentSnap.Data()

	return document, nil
}

// ReadDocumentGeneral reads a specific document into a predefined struct.
func ReadDocumentGeneral(config *Config, collection, id string, document interface{}) error {
	documentSnap, err := config.FirestoreClient.Collection(collection).Doc(id).Get(*config.Ctx)
	if err != nil {
		log.Println("could not read document: ", id)
		return err
	}
	document = documentSnap.DataTo(document)
	return nil
}

// CountDocuments counts all docs in specified collection
func CountDocuments(config *Config, collection string) (int, error) {
	count := 0
	iter := config.FirestoreClient.Collection(collection).Documents(*config.Ctx)

	for {
		_, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return 0, err
		}
		count++
	}
	return count, nil
}

// TODO function to update a dacument
/*
// UpdateDocument updates the content of an existing document.
func UpdateDocument(config *Config, collection, id string, newContent interface{}) {
	content := fmt.Sprint(newContent)
	_, err := config.FirestoreClient.Collection(collection).Doc(id).Update(*config.Ctx, []firestore.Update{
		{
			Path:  "hei",
			Value: 4,
		},
	})
}
*/
