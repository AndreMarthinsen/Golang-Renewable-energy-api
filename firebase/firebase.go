// package firebase provides generic Firebase functionality.

package firebase

import (
	"cloud.google.com/go/firestore"
	"context"
	// TODO rename package to avoid name collisions
	fb "firebase.google.com/go"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"log"
)

// FirestoreContext client and context for DB
type FirestoreContext struct {
	client *firestore.Client
	ctx    *context.Context
}

// TODO keep edited version only
/*
}// FirestoreContext client and context for DB
type FirestoreContext struct {
	client *firestore.Client
	ctx    context.Context
}
*/

/*
// TODO maybe change to constructor function
// Initialize lets app communicate with a cloud Firestore database.
// configFilePath refers to account credentials config file created
// when setting up Firestore in browser.
func (f *FirestoreContext) Initialize(configFilePath string) error {
	f.ctx = context.Background()

	// Load service account credentials:
	serviceAccount := option.WithCredentialsFile(configFilePath)
	app, err := firebase.NewApp(f.ctx, nil, serviceAccount)
	if err != nil {
		// TODO handle another way?
		// TODO error descriptions
		log.Println(err)
		return err
	}

	// Instantiate firebase client:
	f.client, err = app.Firestore(f.ctx)
	if err != nil {
		log.Println(err)
		return err
	}
	return nil
}
*/
// TODO remove duplicate function
/*
func NewFirestoreContext(configFilePath string) (FirestoreContext, error) {
	fsContext := FirestoreContext{
		client: new(firestore.Client),
		ctx:    new(context.Context),
	}

	*fsContext.ctx = context.Background()

	// Load service account credentials:
	serviceAccount := option.WithCredentialsFile(configFilePath)
	app, err := firebase.NewApp(*fsContext.ctx, nil, serviceAccount)
	if err != nil {
		log.Println("unable to create new firebase app")
		return FirestoreContext{}, err
	}
	// Instantiate firebase client
	fsContext.client, err = app.Firestore(*fsContext.ctx)
	if err != nil {
		log.Println("unable to instantiate firestore client")
		return FirestoreContext{}, err
	}
	return fsContext, err
}

// Close closes the client
func (f *FirestoreContext) Close() error {
	err := f.client.Close()
	if err != nil {
		log.Println("could not close Firebase client")
		return err
	}
	return nil
}
*/

func NewFirestoreContext(configFilePath string, config Config) error {

	config.FirestoreClient = new(firestore.Client)
	config.Ctx = new(context.Context)

	*config.Ctx = context.Background()

	// Load service account credentials:
	serviceAccount := option.WithCredentialsFile(configFilePath)
	app, err := fb.NewApp(*config.Ctx, nil, serviceAccount)
	if err != nil {
		log.Println("unable to create new firebase app")
		return err
	}
	// Instantiate firebase client
	config.FirestoreClient, err = app.Firestore(*config.Ctx)
	if err != nil {
		log.Println("unable to instantiate firestore client")
		return err
	}
	return nil
}

/*
// Close closes the client
func (f *FirestoreContext) Close() error {
	err := f.client.Close()
	if err != nil {
		log.Println("could not close Firebase client")
		return err
	}
	return nil
}
*/

// Close closes the client
func Close(config Config) error {
	err := config.FirestoreClient.Close()
	if err != nil {
		log.Println("could not close Firebase client")
		return err
	}
	return nil
}

/*
// AddDocument stores a new document in a Firestore collection (by name).
// Returns autogenerated document ID.
func (f *FirestoreContext) AddDocument(collection string, document interface{}) (string, error) {
	id, _, err := f.client.Collection(collection).Add(*f.ctx, document)
	if err != nil {
		log.Println("Duplicate document id generated")
		return "", err
	}
	return id.ID, nil
}
*/

// AddDocument stores a new document in a Firestore collection (by name).
// Returns autogenerated document ID.
func AddDocument(config Config, collection string, document interface{}) (string, error) {
	id, _, err := config.FirestoreClient.Collection(collection).Add(*config.Ctx, document)
	if err != nil {
		log.Println("Duplicate document id generated")
		return "", err
	}
	return id.ID, nil
}

/*
// AddDocumentById stores a new document with specified id in a
// Firestore collection.
func (f *FirestoreContext) AddDocumentById(collection string, id string, document interface{}) error {
	_, err := f.client.Collection(collection).Doc(id).Set(*f.ctx, document)
	if err != nil {
		log.Println("Could not create document with id: ", id)
		return err
	}
	return nil
}
*/

// AddDocumentById stores a new document with specified id in a
// Firestore collection.
func AddDocumentById(config Config, collection string, id string, document interface{}) error {
	_, err := config.FirestoreClient.Collection(collection).Doc(id).Set(*config.Ctx, document)
	if err != nil {
		log.Println("Could not create document with id: ", id)
		return err
	}
	return nil
}

/*
// DeleteDocument deletes data with a specific id from a collection.
func (f *FirestoreContext) DeleteDocument(collection, id string) error {
	_, err := f.client.Collection(collection).Doc(id).Delete(*f.ctx)
	if err != nil {
		log.Println("Error while deleting document")
		return err
	}
	return nil
}
*/

// DeleteDocument deletes data with a specific id from a collection.
func DeleteDocument(config Config, collection, id string) error {
	_, err := config.FirestoreClient.Collection(collection).Doc(id).Delete(*config.Ctx)
	if err != nil {
		log.Println("Error while deleting document")
		return err
	}
	return nil
}

/*
// ReadDocument reads a specific document by id.
func (f *FirestoreContext) ReadDocument(collection, id string) (map[string]interface{}, error) {
	documentSnap, err := f.client.Collection(collection).Doc(id).Get(*f.ctx)
	if err != nil {
		return nil, err
	}
	document := documentSnap.Data()

	return document, nil
}
*/

// ReadDocument reads a specific document by id.
func ReadDocument(config Config, collection, id string) (map[string]interface{}, error) {
	documentSnap, err := config.FirestoreClient.Collection(collection).Doc(id).Get(*config.Ctx)
	if err != nil {
		return nil, err
	}
	document := documentSnap.Data()

	return document, nil
}

/*
// ReadDocumentGeneral reads a specific document into a predefined struct.
func (f *FirestoreContext) ReadDocumentGeneral(collection, id string, document interface{}) error {
	documentSnap, err := f.client.Collection(collection).Doc(id).Get(*f.ctx)
	if err != nil {
		log.Println("could not read document: ", id)
		return err
	}
	document = documentSnap.DataTo(document)
	return nil
}
*/

// ReadDocumentGeneral reads a specific document into a predefined struct.
func ReadDocumentGeneral(config Config, collection, id string, document interface{}) error {
	documentSnap, err := config.FirestoreClient.Collection(collection).Doc(id).Get(*config.Ctx)
	if err != nil {
		log.Println("could not read document: ", id)
		return err
	}
	document = documentSnap.DataTo(document)
	return nil
}

/*
// CountDocuments counts all docs in specified collection
func (f *FirestoreContext) CountDocuments(collection string) (int, error) {
	count := 0
	iter := f.client.Collection(collection).Documents(*f.ctx)

	for {
		_, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return 0, err
		}
		count++
	}
	return count, nil
}
*/

// CountDocuments counts all docs in specified collection
func CountDocuments(config Config, collection string) (int, error) {
	count := 0
	iter := config.FirestoreClient.Collection(collection).Documents(*config.Ctx)

	for {
		_, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return 0, err
		}
		count++
	}
	return count, nil
}
